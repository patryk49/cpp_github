Matrix Expression Operations:
	rows(Matrix)                                   - return number of rows
	cols(Matrix)                                   - return number of columns
	len(Matrix)                                    - return nuber of elements
	cap(Matrix)                                    - return capacity of matrix (if it exists)

	trace(Matrix)                                  - return the trace of matrix
	determinant(Matrix)                            - return the determinant of matrix
	minor(Matrix, Uint, Uint)                      - return the minor of matrix with specified index
	cofactor(Matrix, Uint, Uint)                   - return the cofactor of matrix with specified index

	is_lower_triangular(Matrix)                    - check if the matrix is lower triangular
	is_upper_triangular(Matrix)                    - check if the matrix if upper triangular
	is_symmetric(Matrix)                           - check if the matrix is symmetric
	is_diagonal(Matrix)                            - check if the matrix is diagonal
	== (Matrix, Matrix)                            - compare matrixes for equality
	=! (Matrix, Matrix)                            - compare matrixes for inequality

	tr(Matrix)                                     - return transpose of matrix
	l_tr(Matrix)                                   - return a mutable view of transposed matrix
	perm_rows(Matrix, Array)                       - return matrix with rows permuted by premutation array
	l_perm_rows(Matrix, Array)                     - return a muteble view of matrix with rows permuted by premutation array
	perm_cols(Matrix, Array)                       - return matrix with columns permuted by premutation array
	l_perm_cols(Matrix, Array)                     - return a muteble view of matrix with columns permuted by premutation array
	cp(Matrix)                                     - return a temporary copy of the matrix

	apply<Operation>(Matrix)                       - return matrix with elements transformed by the operation
	apply(Matrix, Operation)                       - return matrix with elements transformed by the operation
	elwise_mul(Matrix, Matrix)                     - return result of element wise matrix multiplication
	elwise_div(Matrix, Matrix)                     - return result of element wise matrix division
	apply<Operation>(Matrix, Matrix)               - return result of element wise matrix operation
	apply(Matrix, Matrix, Operation)               - return result of element wise matrix operation

	generate<Operation>(Uint, Uint)                - return a specified size matrix generated by the operation
	generate(Uint, Uint, Operation)                - return a specified size matrix generated by the operation
	uniform(Uint, Uint, Value)                     - return a specified size matrix filled with value

	+ (Matrix, Matrix)                             - return a result of matrix addition
	- (Matrix, Matrix)                             - return a result of matrix subtraction
	* (Matrix, Matrix)                             - return a result of matrix multiplication
	* (Matrix, Value)                              - return a result of matrix multiplucation by scalar value
	* (Value, Matrix)                              - return a result of matrix multiplication by scalar value



Matrix Statement Operations:
	transpose(&Matrix, Matrix, Matrix)             - put result of matrix transposition into the destination matrix
	kron_prod(&Matrix, Matrix, Matrix)             - put result of kronecker product into the destination matrix
	kron_apply<Operation>(&Matrix, Matrix, Matrix) - put result of binary operation applied like product in kronecker
	                                                 product into the destination matrix
	kron_apply(&Matrix, Matrix, Matrix, Operation) - put result of binary operation applied like product in kronecker
	                                                 product into the destination matrix

	swap_rows(&Matrix, Uint, Uint)                 - swap specified rows of destination matrix
	swap_cols(&Matrix, Uint, Uint)                 - swap specified columns of destination matrix
	scale_row(&Matrix, Uint, Value)                - multiply specified rows of destination matrix by the value
	scale_col(&Matrix, Uint, Value)                - multiply specified column of destination matrix by the value
	add_rows(&Matrix, Uint, Uint)                  - add second specified row to the first specified row of destination matrix
	add_cols(&Matrix, Uint, Uint)                  - add second specified column to the first specified column of destination matrix

	lu_decompose(&Matrix)                          - apply in place lu matrix decomposition
	lup_decompose(&Matrix, &Array)                 - apply in place lu matrix decomposition and save the permutations into the array

	extract lower(&Matrix, &Matrix)                - extract the lower part of second Matrix into the first matrix and fill the diagonal
	                                                 of the first matrix with ones
	extract upper(&Matrix, &Matrix)                - extract the upper part of second Matrix into the first matrix and fill the diagonal
	                                                 of the first matrix with ones

	cholesky_decompose(&Matrix)                    - apply in place cholesky decomposition
	cholesky_update(&Matrix, Matrix)               - in place update the cholesky decomposition with specified matrix

	permute_rows(&Matrix, Array)                   - in place permute the rows of the destination matrix
	permute_cols(&Matrix, Array)                   - in place permute the columns of the destination matrix

	invert(&Matrix)                                - invert the matrix in place
	invert(&Matrix, Matrix)                        - put the inverted matrix into the destination matrix
	pinvert(&Matrix, Matrix)                       - put the pseudo inverted matrix into the destination matrix

	as_col(Matrix)                                 - cast matrix to a column vector
	l_as_col(Matrix)                               - cast matrix to a mutable view of column vector
	as_row(Matrix)                                 - cast matrix to a row vector
	l_as_row(Matrix)                               - cast matrix to a mutable view of row vector





Vector Expression Operations:
	len(Vector)                                    - return number of elements
	cap(Vector)                                    - return capacity of vector (if it exists)

	trace(Vector)                                  - return the trace of vector
	inner_prod(Vector, Vector)                     - return the inner product of vectors
	
	== (Vector, Vector)                            - compare vectors for equality
	=! (Vector, Vector)                            - compare vectors for inequality

	perm(Vector, Array)                            - return vector with elements permuted by premutation array
	l_perm(Vector, Array)                          - return a muteble view of vector with elements permuted by
	                                                 premutation array
	cp(Vector)                                     - return a temporary copy of the vector

	apply<Operation>(Vector)                       - return vector with elements transformed by the operation
	apply(Vector, Operation)                       - return vector with elements transformed by the operation
	elwise_mul(Vector, Vector)                     - return result of element wise vector multiplication
	elwise_div(Vector, Vector)                     - return result of element wise vector division
	apply<Operation>(Vector, Vector)               - return result of element wise vector operation
	apply(Vector, Vector, Operation)               - return result of element wise vector operation

	generate<Operation>(Uint, Uint)                - return a specified size vector generated by the operation
	generate(Uint, Uint, Operation)                - return a specified size vector generated by the operation
	uniform(Uint, Uint, Value)                     - return a specified size vector filled with value

	+ (Vector, Vector)                             - return a result of vector addition
	- (Vector, Vector)                             - return a result of vector subtraction
	* (Vector, Value)                              - return a result of vector multiplucation by scalar value
	* (Value, Vector)                              - return a result of vector multiplication by scalar value

	as_col(Vector)                                 - cast vector to a column matrix
	l_as_col(Vector)                               - cast vector to a mutable view of column matrix
	as_row(Vector)                                 - cast vector to a row matrix
	l_as_row(Vector)                               - cast vector to a mutable view of row matrix
	as_diagonal(Vector)                            - cast vector to a diagonal matrix
	l_as_diagonal(Vector)                          - cast vector to a mutable view of diagonal matrix

	
	outer_prod(Vector)                             - return the outer product of vectors
	outer_op<Operation>(Vector)                    - return the result of operations applied like in outer product
	outer_op(Vector, Operation)                    - return the result of operations applied like in outer product



Vector Statement Opearations:
	permute_rows(&Vector, Array)                   - in place permute the elements of the destination vector





Matrix Vector Expression Operations:
	* (Matrix, Vector)                             - return the result of matrix multiplied by a vector
	* (Vector, Matrix)                             - return the result of vector multiplied by a matrix
	== (Matrix, Vector)                            - compare matrix and vector for equality
	== (Vector, Matrix)                            - compare vector and matrix for equality
	=! (Matrix, Vector)                            - compare matrix and vector for inequality
	=! (Vector, Matrix)                            - compare vector and matrix for inequality




Matrix Vector Expression Operations:
	lup_solve(&Vector, Matrix, Array, Vector)      - solve the linear eqaution using lu decomposed matrix and
	                                                 put the result into the destination vector
	lin_solve(&Vector, Matrix)                     - solve the linear equation stored in vector and matrix, and
	                                                 put the result into the destination vector





Unsigned Integer Array Operations:
	invert_permuts(&Array)                         - invert the permutation array in place
	invert_permuts(&Array, Array)                  - put the inverted permutation array into the destination array
